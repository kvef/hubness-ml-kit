
/**
* Hub Miner: a hubness-aware machine learning experimentation library.
* Copyright (C) 2014  Nenad Tomasev. Email: nenad.tomasev at gmail.com
* 
* This program is free software: you can redistribute it and/or modify it under
* the terms of the GNU General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option) any later
* version.
* 
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along with
* this program. If not, see <http://www.gnu.org/licenses/>.
*/
package data.generators;

import data.representation.DataInstance;
import data.representation.DataSet;
import ioformat.IOARFF;
import java.io.File;
import java.util.ArrayList;
import java.util.Random;

/**
 * This class generates a certain number of mislabeled data instances according
 * to the underlying model.
 *
 * @author Nenad Tomasev <nenad.tomasev at gmail.com>
 */
public class GaussianMislabeledDataGenerator {

    // Meta-generator to use for data instances.
    private MixtureOfFloatGenerators instanceGenerator = null;
    private int numClusters = 10;
    private int numDimensions = 25;
    // Whether to use paired Gaussian data generators or not.
    private boolean usePairedGaussians = true;

    /**
     *
     * @param numClusters Number of clusters to generate.
     * @param numDimensions Number of float features to generate.
     * @param usePairedGaussians True if using paired Gaussian generators.
     */
    public GaussianMislabeledDataGenerator(
            int numClusters, int numDimensions, boolean usePairedGaussians) {
        this.numClusters = numClusters;
        this.numDimensions = numDimensions;
        this.usePairedGaussians = usePairedGaussians;
    }

    /**
     * Initialize data generators.
     */
    public void initializeGenerators() {
        Random randa = new Random();
        // Initialization of specification arrays.
        float[][] means = new float[numClusters][numDimensions];
        float[][] stDevs = new float[numClusters][numDimensions];
        float[] lBounds = new float[numDimensions];
        float[] uBounds = new float[numDimensions];
        for (int i = 0; i < numDimensions; i++) {
            lBounds[i] = -Float.MAX_VALUE;
            uBounds[i] = Float.MAX_VALUE;
        }
        float meanLBound = - 20;
        float meanUBound = 20;
        float stDevLBound = 2;
        float stDevUBound = 5;
        for (int i = 0; i < numClusters; i++) {
            for (int j = 0; j < numDimensions; j++) {
                means[i][j] = meanLBound + randa.nextFloat()
                        * (meanUBound - meanLBound);
                stDevs[i][j] = stDevLBound + randa.nextFloat()
                        * (stDevUBound - stDevLBound);
            }
        }
        // Initialization of generator objects.
        DataGenerator[] generators = new DataGenerator[numClusters];
        if (usePairedGaussians) {
            float firstProb;
            for (int i = 0; i < generators.length; i++) {
                firstProb = 0.15f + randa.nextFloat() * 0.7f;
                generators[i] = new PairedSphericGaussians(means[i],
                        stDevs[i], lBounds, uBounds, firstProb);
            }
        } else {
            for (int i = 0; i < generators.length; i++) {
                generators[i] = new MultiDimensionalSphericGaussianGenerator(
                        means[i], stDevs[i], lBounds, uBounds);
            }
        }
        instanceGenerator = new MixtureOfFloatGenerators(generators);
    }

    /**
     * Generates a random data collection.
     *
     * @param numInstances Number of instances to generate.
     * @param mislabeledProb Mislabeling probability.
     * @return DataSet object that was generated by the model.
     */
    public DataSet generateRandomDataSet(
            int numInstances, float mislabeledProb) {
        DataSet dset = new DataSet();
        dset.fAttrNames = new String[numDimensions];
        dset.data = new ArrayList<>(numInstances);
        // Determine how many instances to pull from which generator.
        float[] generatorProportions = new float[numClusters];
        Random randa = new Random();
        float probTotal = 0;
        for (int i = 0; i < numClusters; i++) {
            generatorProportions[i] = 1 + randa.nextInt(30);
            probTotal += generatorProportions[i];
        }
        for (int i = 0; i < numClusters; i++) {
            generatorProportions[i] /= probTotal;
            generatorProportions[i] *= numInstances;
        }
        int[] clusterSizes = new int[numClusters];
        for (int i = 0; i < numClusters; i++) {
            clusterSizes[i] = (int) generatorProportions[i];
        }

        DataInstance[] instances =
                instanceGenerator.generateDataInstances(clusterSizes);
        float choice;
        int changedLabel;
        for (int i = 0; i < instances.length; i++) {
            dset.addDataInstance(instances[i]);
            instances[i].embedInDataset(dset);
            choice = randa.nextFloat();
            if (choice < mislabeledProb) {
                do {
                    changedLabel = randa.nextInt(numClusters);
                } while (changedLabel == instances[i].getCategory());
                instances[i].setCategory(changedLabel);
            }
        }
        return dset;
    }

    /**
     * Generates the synthetic data and persists the data to a file.
     *
     * @param numInstances Number of instances to generate.
     * @param outFile File to write the data to.
     * @param mislabeledProb Mislabeling probability.
     * @throws Exception
     */
    public void generateAndWriteToFile(
            int numInstances,
            File outFile,
            float mislabeledProb) throws Exception {
        DataSet dset = generateRandomDataSet(numInstances, mislabeledProb);
        IOARFF persister = new IOARFF();
        persister.save(dset, outFile.getPath(), null);
    }

    /**
     * Command line argument specification.
     */
    public static void info() {
        System.out.println("6 args...");
        System.out.println("arg0: numClusters");
        System.out.println("arg1: numDimensions");
        System.out.println("arg2: numInstances");
        System.out.println("arg3: Probability of an instance being mislabeled");
        System.out.println("arg4: True/false on using paired gaussians as "
                + "generators");
        System.out.println("arg5: Output arff file");
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 6) {
            info();
        } else {
            GaussianMislabeledDataGenerator worker =
                    new GaussianMislabeledDataGenerator(
                    Integer.parseInt(args[0]),
                    Integer.parseInt(args[1]),
                    Boolean.parseBoolean(args[4]));
            worker.initializeGenerators();
            worker.generateAndWriteToFile(
                    Integer.parseInt(args[2]),
                    new File(args[5]),
                    Float.parseFloat(args[3]));
        }
    }
}